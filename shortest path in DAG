DAGSSP(G, s):
  topological_sort(G)
  dist[s] = 0
  for each vertex u in sorted order:
    for each neighbor v of u:
      if dist[v] > dist[u] + weight(u, v):
        dist[v] = dist[u] + weight(u, v)

void topological_sort(int src,vector<pair<int,int>>adj[],vector<bool>&vis,stack<int>&s)

  {

      vis[src]=1;

      for(auto j:adj[src])

      {

          if(!vis[j.first])

          topological_sort(j.first,adj,vis,s);

      }

      s.push(src);

  }

     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){

        vector<pair<int,int>>adj[N];

        

        for(int i=0;i<M;i++)

        {
//matrix to list
            int u=edges[i][0], v=edges[i][1], w=edges[i][2];

            adj[u].push_back({v,w});

        }

        

        stack<int>s;

        vector<bool>vis(N,0);

        for(int i=0;i<N;i++)

        {

            if(!vis[i])

            topological_sort(i,adj,vis,s);

        }

        

        vector<long long int>dist(N,INT_MAX);

        dist[0]=0;

        

        while(!s.empty())

        {

            int curr=s.top();

            s.pop();

            for(auto i:adj[curr])

            {

                int v=i.first;

                int wt=i.second;

                

                long long int x=wt+dist[curr];

                long long int y=dist[v];

                

                if(x<dist[v])

                dist[v]=x;

            }

        }

        

        for(int i=0;i<N;i++)

        {

            if(dist[i]==INT_MAX)

            dist[i]=-1;

        }

        vector<int>ans(N);

        for(int i=0;i<N;i++)

        {

            ans[i]=dist[i];

        }

        return ans;

    }

