bool isBipartiteUtil(vector<int> adj[], int u, vector<int>& color) {
    for(int v : adj[u]) {
        if(color[v] == -1) { // If the adjacent node is not yet colored
            color[v] = 1 - color[u]; // Assign opposite color to the adjacent node
            if(!isBipartiteUtil(adj, v, color)) // Recursively check if the subgraph is bipartite
                return false;
        } else if(color[v] == color[u]) { // If the adjacent node has the same color as the current node
            return false; // The graph is not bipartite
        }
    }
    return true; // The graph is bipartite
}

	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	vector<int> color(V, -1); // Initialize color of all nodes as -1 (unvisited)
    for(int i = 0; i < V; i++) {
        if(color[i] == -1) { // If the current node is not yet colored
            color[i] = 1; // Assign color 1 to the current node
            if(!isBipartiteUtil(adj, i, color)) // Recursively check if the subgraph is bipartite
                return false;
        }
    }
    return true; // The graph is bipartite
	    
