In summary, the calculation of indegrees of nodes is required for detecting a cycle in a directed graph using BFS because it allows us to identify
when a node is part of a cycle by checking if it 
has an indegree of zero but its neighbors have already been visited.

Topological sorting is a process of ordering the nodes in a directed acyclic graph (DAG) such that if there is an edge from node u to node v, then u comes before v in the ordering. In other words, topological sorting arranges the nodes in a DAG in
a linear order such that all the dependencies are satisfied.

One common algorithm for topological sorting is Kahn's algorithm, which relies on calculating the indegree of nodes. 
The indegree of a node is the number of edges that point to that node. In the context of topological sorting, the indegree of a node represents the 
number of incoming edges to that node, or the number of nodes that must be processed before this node can be processed.

To perform topological sorting using Kahn's algorithm, we first calculate the indegree of each node in the DAG. 
We then start with the nodes that have an indegree of zero and add them to a queue. We repeatedly remove a node from the queue, 
add it to the sorted order, and decrement the indegree of all its neighbors. If any neighbor's indegree becomes zero, we add it to the queue. 
We continue this process until all the nodes have been processed.

The reason why indegree calculation is required for topological sorting using Kahn's algorithm is that 
it allows us to identify the nodes that have no incoming edges, and therefore, can be processed first. Without calculating the indegree of nodes, 
we would not be able to identify the nodes that have no dependencies, 
and therefore, we would not be able to start the sorting process.

Furthermore, decrementing the indegree of neighbors during the sorting process ensures that we always process the nodes with the fewest dependencies first, 
which is essential for finding a valid topological ordering. If we process a node before processing all its dependencies, 
it would violate the requirement of topological sorting that the nodes must be processed in a specific order such that all the dependencies are satisfied.

In summary, the calculation of the indegree of nodes is required for topological sorting using Kahn's algorithm because it allows us to identify the nodes that have no incoming edges and ensures that we always process the nodes with the fewest dependencies first.
bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int>indegree(V,0);
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                indegree[it]++;
            }
        }
        queue<int>q;
        vector<int>topo;
          for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.push(i);
            }
          }
            while(!q.empty()){
            int node=q.front();
            q.pop();
            topo.push_back(node);
            for(auto it: adj[node]){
                indegree[it]--;
                if(indegree[it]==0)q.push(it);
            }
        }
        if(topo.size()==V)return false;
        return true;
    }
